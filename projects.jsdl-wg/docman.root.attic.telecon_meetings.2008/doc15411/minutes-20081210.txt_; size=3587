Teleconference
==============

* Participants

  Philipp Wieder
  Geoff Williams
  Andreas Savva (minutes)
  Stephen Pickles
  David Meredith
  Steven McGough
  Donal Fellows
  Fred Brisard

* Early discussion

  - Philipp mentioned that OGF25 session proposal deadline seems to be
    Dec. 15th
  - Andreas will double-check with Joel and submit session request by
    the 15th if that is a hard deadline.
  - Agreed to two sessions, similar to OGF24:
    - General session
    - Activity instance session

* Parameter Sweep public comment discussion

** Double loop and proposed loopcount change

   Minutes from the last call were not available. Consensus on this
   issue at the last call was reported as agreeing to the proposed
   change, and rechecking the decision on this call. Some participants
   did not agree with this summary and the issue was discussed again.

   - Revisited the arguments against start/end/step as double values
     and why doing it this way might lead to unclear behaviour. 
     - It is desirable to be able to tell the cardinality of
       loops---hence the number of jobs that will be generated by the
       sweep---by inspection. This is not possible with double values
       due to accuracy issues
     - Issues with accuracy of the values used
     - It makes it easy for the user to mistakenly write a sweep that
       generates an enormous number jobs
     - It was noted that Fortan deprecated this kind of loop in later
       versions.

   - One argument against loopcounts is that they are awkward for the
     user. It seems unintuitive to write in terms of loop counts,
     especially for the exceptions. Users probably do not think in
     those terms.

   - Proposed that start, end, step could be what the user interface
     allows the users to work with, while loopcount is what the
     backend uses
   - Should the spec restrict users them to certain patterns (only
     loopcount)? Argued that the spec is not meant to be a
     human-interface but for programs; not what the user will see, so
     it is not restrictive in that sense.
   
   - Proposed that in any case loop exceptions would be better
     formulated as value ranges, as defined by the range type in JSDL
     1.0
     - With exception accuracy (equality check), for example, be some
       interval of the step size
     - Argued that in some cases it might also be useful to have the
       loopcount exception as well

   - If loopcounts are used does loop cardinality include the
     exceptions or not?
     - Proposed that cardinality should include exceptions. That is,
       loop cardinality is the generated values before the exceptions
       are applied
     - Has to be well defined in the spec either way.

   - Rough consensus seems to lean towards the loopcount but there is
     sufficient opposition that the issue cannot be closed at this
     time.

   Action: Geoff and David will summarize the pros/cons of loop double
           vs loopcount for the next call. Send to the list in
           advance.

* Activity instance schema

  - Quick overview of updated text and survey template. 
  - Philipp will add some more explanatory text to the survey before
    sending it to the list
  - Besides sending to the list also ask use case contributors and
    other interested parties for feedback:
    - Chris Smith, Shabaz Memon, Fred Brisard, Steven Newhouse, Stephen McGough

* Next call is scheduled fo  January 7, 2009, at 1pm UTC




  
